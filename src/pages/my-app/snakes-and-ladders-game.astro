---
import Layout from '~/layouts/PageLayout.astro';
import Board from '~/components/game/Board.astro';
import Dice from '~/components/game/Dice.astro';
import PlayerSetup from '~/components/game/PlayerSetup.astro';
import GameStatus from '~/components/game/GameStatus.astro';
import GameStats from '~/components/game/GameStats.astro';

import type { GameState, GameSettings, Player } from '~/lib/game/types';
import { createInitialGameState, createRandomGameState, createDefaultGameState, rollDice, movePlayer, checkWinCondition, getNextPlayer } from '~/lib/game/gameLogic';

const metadata = {
  title: 'Snakes and Ladders - Play Online',
  description: 'Play the classic Snakes and Ladders game online with friends and family',
};

// Default game settings
const defaultSettings: GameSettings = {
  playerCount: 2,
  cpuCount: 1,
  playerNames: ['Player 1', 'CPU 1'],
  playerColors: ['#ef4444', '#3b82f6', '#10b981', '#f59e0b', '#8b5cf6'],
  diceMin: 1,
  diceMax: 6,
  snakeCount: 8,
  ladderCount: 8,
};

// Default game state
const defaultGameState: GameState = {
  players: [],
  currentPlayerIndex: 0,
  diceValue: 0,
  gameStatus: 'setup',
  winner: null,
  boardSize: 100,
  snakes: [
    { start: 16, end: 6 },
    { start: 47, end: 26 },
    { start: 49, end: 11 },
    { start: 56, end: 53 },
    { start: 62, end: 19 },
    { start: 64, end: 60 },
    { start: 87, end: 24 },
    { start: 93, end: 73 },
    { start: 95, end: 75 },
    { start: 98, end: 78 },
  ],
  ladders: [
    { start: 1, end: 38 },
    { start: 4, end: 14 },
    { start: 9, end: 31 },
    { start: 21, end: 42 },
    { start: 28, end: 84 },
    { start: 36, end: 44 },
    { start: 51, end: 67 },
    { start: 71, end: 91 },
    { start: 80, end: 100 },
  ],
  totalRolls: 0,
};

// --- Add Astro state for toggling snakes and ladders ---
let showSnakes = true;
let showLadders = true;

// Store original snakes and ladders for toggling
let originalSnakes = [];
let originalLadders = [];

function toggleSnakes() {
  showSnakes = !showSnakes;
  updateToggleButtons();
  updateBoard();
}
function toggleLadders() {
  showLadders = !showLadders;
  updateToggleButtons();
  updateBoard();
}
---

<Layout metadata={metadata}>
  <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-700 py-8">
    <div class="container mx-auto px-4">
      <h1 class="text-4xl font-bold text-center mb-8 text-gray-800 dark:text-white">
        Snakes and Ladders
      </h1>
      
      <div id="game-container">
        <!-- Game Setup -->
        <div id="game-setup">
          <PlayerSetup settings={defaultSettings} />
        </div>
        
        <!-- Game Board -->
        <div id="game-board" class="hidden">
          <div id="game-status-container">
            <GameStatus gameState={defaultGameState} />
          </div>
          
          <div id="game-stats-container">
            <GameStats gameState={defaultGameState} />
          </div>
          
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Game Board -->
            <div class="lg:col-span-2">
              <div id="board-container">
                <Board gameState={defaultGameState} showSnakes={showSnakes} showLadders={showLadders} />
              </div>
              <!-- Toggle buttons will be added here by JavaScript -->
              <div id="toggle-buttons-container" class="flex gap-4 mt-4">
              </div>
            </div>
            
            <!-- Game Controls -->
            <div class="space-y-6">
              <div id="dice-container">
                <Dice value={0} />
              </div>
              
              <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                <h3 class="text-lg font-semibold mb-4 text-gray-700 dark:text-white">Game Controls</h3>
                <div class="space-y-3">
                  <button 
                    id="new-game-btn"
                    class="w-full py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors duration-200"
                  >
                    New Game
                  </button>
                  <button 
                    id="restart-btn"
                    class="w-full py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg font-medium transition-colors duration-200"
                  >
                    Restart
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import type { GameState, Player } from '~/lib/game/types';
  import { createInitialGameState, createRandomGameState, createDefaultGameState, rollDice, movePlayer, checkWinCondition, getNextPlayer } from '~/lib/game/gameLogic';

  let gameState = null;
  let players = [];
  
  // State for toggling snakes and ladders
  let showSnakes = true;
  let showLadders = true;

  // Store original snakes and ladders for toggling
  let originalSnakes = [];
  let originalLadders = [];

  function toggleSnakes() {
    showSnakes = !showSnakes;
    updateToggleButtons();
    updateBoard();
  }
  function toggleLadders() {
    showLadders = !showLadders;
    updateToggleButtons();
    updateBoard();
  }

  // Initialize event listeners when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Create toggle buttons
    createToggleButtons();
    
    // Listen for the custom event from PlayerSetup
    window.addEventListener('startGame', (e) => {
      players = e.detail.players.map((p, i) => ({
        ...p,
        position: 1,
        isWinner: false,
        isActive: true,
        stats: {
          totalRolls: 0,
          snakeBites: 0,
          ladderClimbs: 0,
          totalDiceValue: 0
        }
      }));
      
      // Store dice configuration
      const diceMin = e.detail.diceMin || 1;
      const diceMax = e.detail.diceMax || 6;
      
      // Store board configuration
      const snakeCount = e.detail.snakeCount || 8;
      const ladderCount = e.detail.ladderCount || 8;
      
      // Use random game state with configured snake and ladder counts
      gameState = createRandomGameState(players, snakeCount, ladderCount);
      
      // Add dice configuration to game state
      gameState.diceMin = diceMin;
      gameState.diceMax = diceMax;
      
      // Store originals for toggling
      originalSnakes = [...gameState.snakes];
      originalLadders = [...gameState.ladders];

      showGameBoard();
      updateGameUI();
    });

    // Roll dice button - use event delegation since the button is created dynamically
    document.addEventListener('click', (e) => {
      if (e.target && e.target.id === 'roll-dice-btn') {
        handleDiceRoll();
      }
    });

    // New game button
    const newGameBtn = document.getElementById('new-game-btn');
    if (newGameBtn) {
      newGameBtn.addEventListener('click', showGameSetup);
    }

    // Restart button
    const restartBtn = document.getElementById('restart-btn');
    if (restartBtn) {
      restartBtn.addEventListener('click', () => {
        if (gameState) {
          gameState = createRandomGameState(players, gameState.snakeCount || 8, gameState.ladderCount || 8);
          updateGameUI();
        }
      });
    }
  });

  function createToggleButtons() {
    const container = document.getElementById('toggle-buttons-container');
    if (!container) return;

    // Create snakes toggle button
    const snakesBtn = document.createElement('button');
    snakesBtn.id = 'toggle-snakes-btn';
    snakesBtn.type = 'button';
    snakesBtn.className = 'px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition';
    snakesBtn.textContent = showSnakes ? 'Hide Snakes' : 'Show Snakes';
    snakesBtn.addEventListener('click', toggleSnakes);
    container.appendChild(snakesBtn);

    // Create ladders toggle button
    const laddersBtn = document.createElement('button');
    laddersBtn.id = 'toggle-ladders-btn';
    laddersBtn.type = 'button';
    laddersBtn.className = 'px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition';
    laddersBtn.textContent = showLadders ? 'Hide Ladders' : 'Show Ladders';
    laddersBtn.addEventListener('click', toggleLadders);
    container.appendChild(laddersBtn);
  }

  function updateToggleButtons() {
    const snakesBtn = document.getElementById('toggle-snakes-btn');
    const laddersBtn = document.getElementById('toggle-ladders-btn');
    
    if (snakesBtn) {
      snakesBtn.textContent = showSnakes ? 'Hide Snakes' : 'Show Snakes';
    }
    
    if (laddersBtn) {
      laddersBtn.textContent = showLadders ? 'Hide Ladders' : 'Show Ladders';
    }
  }

  function showGameBoard() {
    const setup = document.getElementById('game-setup');
    const board = document.getElementById('game-board');
    if (setup && board) {
      setup.classList.add('hidden');
      board.classList.remove('hidden');
    }
  }

  function showGameSetup() {
    const setup = document.getElementById('game-setup');
    const board = document.getElementById('game-board');
    if (setup && board) {
      setup.classList.remove('hidden');
      board.classList.add('hidden');
    }
  }

  function updateGameUI() {
    if (!gameState) return;
    
    updateGameStatus();
    updateGameStats();
    updateBoard();
    updateDice();
  }

  function updateGameStatus() {
    const statusContainer = document.getElementById('game-status-container');
    if (statusContainer && gameState) {
      // Create a simple status display
      const currentPlayer = gameState.players[gameState.currentPlayerIndex];
      statusContainer.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 max-w-4xl mx-auto mb-6">
          <div class="grid grid-cols-1 md:grid-cols-5 gap-6">
            <!-- Current Player -->
            <div class="text-center">
              <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-white">Current Player</h3>
              <div class="flex items-center justify-center space-x-2">
                <div 
                  class="w-6 h-6 rounded-full border-2 border-white dark:border-gray-800"
                  style="background-color: ${currentPlayer.color}"
                ></div>
                <span class="font-medium text-gray-700 dark:text-white">${currentPlayer.name}</span>
                ${currentPlayer.isCPU ? '<span class="text-sm text-gray-500 dark:text-white">(CPU)</span>' : ''}
              </div>
              <p class="text-sm text-gray-600 dark:text-white mt-1">
                Position: ${currentPlayer.position}
              </p>
            </div>
            
            <!-- Dice Value -->
            <div class="text-center">
              <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-white">Last Roll</h3>
              <div class="text-3xl font-bold text-blue-600 dark:text-blue-400">
                ${gameState.diceValue || '-'}
              </div>
            </div>
            
            <!-- Dice Configuration -->
            <div class="text-center">
              <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-white">Dice Range</h3>
              <div class="text-lg font-bold text-purple-600 dark:text-purple-400">
                ${gameState.diceMin} - ${gameState.diceMax}
              </div>
              <p class="text-xs text-gray-500 dark:text-white mt-1">
                ${gameState.diceMin < 0 ? 'Can move backward' : 'Forward only'}
              </p>
            </div>
            
            <!-- Board Elements -->
            <div class="text-center">
              <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-white">Board Elements</h3>
              <div class="flex justify-center space-x-4">
                <div>
                  <div class="text-lg font-bold text-red-600 dark:text-red-400">
                    ${gameState.snakeCount || gameState.snakes.length}
                  </div>
                  <p class="text-xs text-gray-500 dark:text-white">Snakes</p>
                </div>
                <div>
                  <div class="text-lg font-bold text-green-600 dark:text-green-400">
                    ${gameState.ladderCount || gameState.ladders.length}
                  </div>
                  <p class="text-xs text-gray-500 dark:text-white">Ladders</p>
                </div>
              </div>
            </div>
            
            <!-- Game Status -->
            <div class="text-center">
              <h3 class="text-lg font-semibold mb-2 text-gray-700 dark:text-white">Game Status</h3>
              <div class="inline-block px-3 py-1 rounded-full text-sm font-medium ${
                gameState.gameStatus === 'playing' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
                gameState.gameStatus === 'finished' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' :
                'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
              }">
                ${gameState.gameStatus === 'playing' ? 'In Progress' :
                 gameState.gameStatus === 'finished' ? 'Game Over' : 'Setting Up'}
              </div>
            </div>
          </div>
          
          <!-- Player List -->
          <div class="mt-6">
            <h3 class="text-lg font-semibold mb-3 text-gray-700 dark:text-white">Players</h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
              ${gameState.players.map((player, index) => `
                <div class="p-3 rounded-lg border-2 ${
                  index === gameState.currentPlayerIndex ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' :
                  player.isWinner ? 'border-green-500 bg-green-50 dark:bg-green-900/20' :
                  'border-gray-200 dark:border-gray-700'
                }">
                  <div class="flex items-center space-x-2 mb-1">
                    <div 
                      class="w-4 h-4 rounded-full border border-white dark:border-gray-800"
                      style="background-color: ${player.color}"
                    ></div>
                    <span class="font-medium text-sm text-gray-700 dark:text-white">${player.name}</span>
                    ${player.isCPU ? '<span class="text-xs text-gray-500 dark:text-white">CPU</span>' : ''}
                  </div>
                  <p class="text-xs text-gray-600 dark:text-white">
                    Position: ${player.position}
                    ${player.isWinner ? '<span class="text-green-600 dark:text-green-400 font-semibold"> - Winner!</span>' : ''}
                  </p>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      `;
    }
  }

  function updateGameStats() {
    const statsContainer = document.getElementById('game-stats-container');
    if (statsContainer && gameState) {
      statsContainer.innerHTML = `
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 mb-4">
          <h3 class="text-lg font-semibold mb-4">Game Statistics</h3>
          <div class="overflow-x-auto">
            <table class="w-full text-sm">
              <thead>
                <tr class="border-b border-gray-200 dark:border-gray-700">
                  <th class="text-left py-2 px-2 text-gray-700 dark:text-white">Statistic</th>
                  ${gameState.players.map(player => `
                    <th class="text-center py-2 px-2">
                      <div class="flex items-center justify-center gap-2">
                        <div class="w-3 h-3 rounded-full" style="background-color: ${player.color}"></div>
                        <span class="text-gray-700 dark:text-white">${player.name}</span>
                      </div>
                    </th>
                  `).join('')}
                </tr>
              </thead>
              <tbody>
                <tr class="border-b border-gray-100 dark:border-gray-700">
                  <td class="py-2 px-2 font-medium text-gray-700 dark:text-white">Snake Bites</td>
                  ${gameState.players.map(player => `
                    <td class="text-center py-2 px-2 text-gray-700 dark:text-white">${player.stats.snakeBites}</td>
                  `).join('')}
                </tr>
                <tr class="border-b border-gray-100 dark:border-gray-700">
                  <td class="py-2 px-2 font-medium text-gray-700 dark:text-white">Ladder Climbs</td>
                  ${gameState.players.map(player => `
                    <td class="text-center py-2 px-2 text-gray-700 dark:text-white">${player.stats.ladderClimbs}</td>
                  `).join('')}
                </tr>
                <tr class="border-b border-gray-100 dark:border-gray-700">
                  <td class="py-2 px-2 font-medium text-gray-700 dark:text-white">Total Rolls</td>
                  ${gameState.players.map(player => `
                    <td class="text-center py-2 px-2 text-gray-700 dark:text-white">${player.stats.totalRolls}</td>
                  `).join('')}
                </tr>
                <tr class="border-b border-gray-100 dark:border-gray-700">
                  <td class="py-2 px-2 font-medium text-gray-700 dark:text-white">Average Dice Value</td>
                  ${gameState.players.map(player => `
                    <td class="text-center py-2 px-2 text-gray-700 dark:text-white">
                      ${player.stats.totalRolls > 0 ? (player.stats.totalDiceValue / player.stats.totalRolls).toFixed(1) : '0.0'}
                    </td>
                  `).join('')}
                </tr>
                <tr class="border-b border-gray-100 dark:border-gray-700">
                  <td class="py-2 px-2 font-medium text-gray-700 dark:text-white">Current Position</td>
                  ${gameState.players.map(player => `
                    <td class="text-center py-2 px-2 font-semibold text-gray-700 dark:text-white">${player.position}</td>
                  `).join('')}
                </tr>
              </tbody>
            </table>
          </div>
          <div class="mt-3 text-xs text-gray-500 dark:text-white">
            Total Game Rolls: ${gameState.totalRolls}
          </div>
        </div>
      `;
    }
  }

  function updateBoard() {
    if (window.updateBoard && gameState) {
      window.updateBoard(gameState, showSnakes, showLadders);
    }
    updateBoardVisibility();
  }

  function updateBoardVisibility() {
    const boardContainer = document.getElementById('board-container');
    if (boardContainer) {
      boardContainer.setAttribute('data-show-snakes', showSnakes.toString());
      boardContainer.setAttribute('data-show-ladders', showLadders.toString());
      boardContainer.dispatchEvent(new CustomEvent('updateVisibility', {
        detail: { showSnakes, showLadders }
      }));
      document.dispatchEvent(new CustomEvent('updateShowSnakesLadders', {
        detail: { showSnakes, showLadders }
      }));
    }
  }

  function updateDice() {
    if (window.updateDice && gameState) {
      window.updateDice(gameState.diceValue, false);
    }
  }

  async function handleDiceRoll() {
    if (!gameState || gameState.gameStatus !== 'playing') {
      return;
    }
    
    const currentPlayer = gameState.players[gameState.currentPlayerIndex];
    if (currentPlayer.isCPU) {
      return; // CPU moves are handled separately
    }

    // Show rolling animation
    if (window.updateDice) {
      window.updateDice(gameState.diceValue, true);
    }

    // Simulate dice roll delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    const diceValue = rollDice(gameState.diceMin, gameState.diceMax);
    
    gameState.diceValue = diceValue;
    gameState.totalRolls += 1;
    currentPlayer.stats.totalRolls += 1;
    currentPlayer.stats.totalDiceValue += diceValue;

    // Move player and update stats
    const moveResult = movePlayer(currentPlayer, diceValue, gameState.snakes, gameState.ladders);
    
    gameState.players[gameState.currentPlayerIndex] = moveResult.player;

    // Update UI
    updateGameUI();

    // Show visual feedback for snake bites and ladder climbs
    if (moveResult.snakeBite && window.showSnakeBite) {
      setTimeout(() => {
        window.showSnakeBite(currentPlayer.id, currentPlayer.position, moveResult.player.position);
      }, 100);
      // Show alert for snake bite
      setTimeout(() => {
        alert(`🐍 ${currentPlayer.name} got bitten by a snake! Moved from position ${currentPlayer.position + diceValue} to ${moveResult.player.position}`);
      }, 200);
    } else if (moveResult.ladderClimb && window.showLadderClimb) {
      setTimeout(() => {
        window.showLadderClimb(currentPlayer.id, currentPlayer.position, moveResult.player.position);
      }, 100);
      // Show alert for ladder climb
      setTimeout(() => {
        alert(`🪜 ${currentPlayer.name} climbed a ladder! Moved from position ${currentPlayer.position + diceValue} to ${moveResult.player.position}`);
      }, 200);
    }

    // Process move result
    setTimeout(() => {
      moveCurrentPlayer(moveResult);
    }, 500);
  }

  function moveCurrentPlayer(moveResult) {
    if (!gameState) return;

    const currentPlayer = gameState.players[gameState.currentPlayerIndex];

    if (checkWinCondition(currentPlayer)) {
      currentPlayer.isWinner = true;
      gameState.gameStatus = 'finished';
      gameState.winner = currentPlayer;
      showWinMessage();
    } else {
      // Move to next player
      gameState.currentPlayerIndex = getNextPlayer(gameState.currentPlayerIndex, gameState.players);

      // Handle CPU turn - only auto-roll for CPU players
      const nextPlayer = gameState.players[gameState.currentPlayerIndex];
      if (nextPlayer.isCPU) {
        setTimeout(() => handleCPUTurn(), 1000);
      }
    }

    updateGameUI();
  }

  async function handleCPUTurn() {
    if (!gameState || gameState.gameStatus !== 'playing') return;

    const currentPlayer = gameState.players[gameState.currentPlayerIndex];
    if (!currentPlayer.isCPU) return;

    // Show rolling animation
    if (window.updateDice) {
      window.updateDice(gameState.diceValue, true);
    }

    // Simulate dice roll delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    const diceValue = rollDice(gameState.diceMin, gameState.diceMax);
    gameState.diceValue = diceValue;
    gameState.totalRolls += 1;
    currentPlayer.stats.totalRolls += 1;
    currentPlayer.stats.totalDiceValue += diceValue;

    // Move player and update stats
    const moveResult = movePlayer(currentPlayer, diceValue, gameState.snakes, gameState.ladders);
    
    gameState.players[gameState.currentPlayerIndex] = moveResult.player;

    // Update UI
    updateGameUI();

    // Show visual feedback for snake bites and ladder climbs
    if (moveResult.snakeBite && window.showSnakeBite) {
      setTimeout(() => {
        window.showSnakeBite(currentPlayer.id, currentPlayer.position, moveResult.player.position);
      }, 100);
      // Show alert for snake bite
      setTimeout(() => {
        alert(`🐍 ${currentPlayer.name} got bitten by a snake! Moved from position ${currentPlayer.position + diceValue} to ${moveResult.player.position}`);
      }, 200);
    } else if (moveResult.ladderClimb && window.showLadderClimb) {
      setTimeout(() => {
        window.showLadderClimb(currentPlayer.id, currentPlayer.position, moveResult.player.position);
      }, 100);
      // Show alert for ladder climb
      setTimeout(() => {
        alert(`🪜 ${currentPlayer.name} climbed a ladder! Moved from position ${currentPlayer.position + diceValue} to ${moveResult.player.position}`);
      }, 200);
    }

    // Process move result
    setTimeout(() => {
      moveCurrentPlayer(moveResult);
    }, 500);
  }

  function showWinMessage() {
    if (gameState && gameState.winner) {
      alert(`Congratulations! ${gameState.winner.name} wins the game!`);
    }
  }
</script> 